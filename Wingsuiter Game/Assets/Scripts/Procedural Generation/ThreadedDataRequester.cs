using System.Collections.Generic;
using UnityEngine;
using System;
using System.Threading;

/// <summary>
/// NOTE: This code has been adapted from a tutorial and thus the majority of this code is not my own
/// A link to the tutorial can be found here: https://www.youtube.com/playlist?list=PLFt_AvWsXl0eBW2EiBtl_sxmDtSgZBxB3
/// All of the code comments are written by me based on my own understanding of this code.
/// </summary>
public class ThreadedDataRequester : MonoBehaviour 
{
	// Instance of this class
	static ThreadedDataRequester instance;
    // Queue to store the data generated by threads, along with their associated callbacks
    Queue<ThreadInfo> dataQueue = new Queue<ThreadInfo>();

	void Awake() 
	{
        // Set the instance to the first found object of type ThreadedDataRequester
        instance = FindObjectOfType<ThreadedDataRequester> ();
	}

    /// <summary>
    /// Static method to request data to be generated on a separate thread.
    /// </summary>
    /// <param name="generateData">A function that generates the required data</param>
    /// <param name="callback">A callback function that processes the generated data</param>
	public static void RequestData(Func<object> generateData, Action<object> callback) 
	{
        // Create a new thread that runs the DataThread method with the provided data and callback
        ThreadStart threadStart = delegate {
			instance.DataThread(generateData, callback);
		};

		// Start the thread
		new Thread (threadStart).Start();
	}

    /// <summary>
    /// Method that runs on a separate thread to generate data and enqueue it with the callback.
    /// </summary>
    /// <param name="generateData">Function that generates the data</param>
    /// <param name="callback">Callback function to be called once the data is generated</param>
	void DataThread(Func<object> generateData, Action<object> callback) 
	{
		object data = generateData ();

        // Lock the data queue to ensure thread safety, then enqueue (add to the end of the queue) the data and callback
        lock (dataQueue) 
		{
			dataQueue.Enqueue(new ThreadInfo (callback, data));
		}
	}
		

	void Update() 
	{
        // If there is any data in the queue, process it
        if (dataQueue.Count > 0) 
		{
            // Dequeue each item and invoke the associated callback
            for (int i = 0; i < dataQueue.Count; i++) 
			{
				ThreadInfo threadInfo = dataQueue.Dequeue();
				threadInfo.callback(threadInfo.parameter);
			}
		}
	}

    /// <summary>
    /// Struct to hold the callback and the generated data.
    /// </summary>
    struct ThreadInfo 
	{
		public readonly Action<object> callback;
		public readonly object parameter;

        /// <summary>
        /// Constructor to initialise the ThreadInfo structure.
        /// </summary>
        /// <param name="callback">The callback function</param>
        /// <param name="parameter">The generated data</param>
		public ThreadInfo (Action<object> callback, object parameter)
		{
			this.callback = callback;
			this.parameter = parameter;
		}

	}
}
